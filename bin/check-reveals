#!/usr/bin/env node

'use strict';

const os = require('os');
const path = require('path');
const fs = require('bfile');
const common = require('../lib/common');
const cfg = require('../lib/config');
const {writeJSON, readJSON, spawn} = require('../lib/util');
const wallet = require('../lib/wallet');

function help() {
  const help = `./bin/check-reveals WALLET_ID [STEP] [OPTIONS]
  OPTIONS:
    --all - Do every step from STEP to the last.

  STEPS:
    0, dump: Get wallet own names from wallet (big wallet request)
    1, filter: Filter auctions in REVEAL state.
    2, sort: Sort auctions by hours until closed.
    3, check-reveals: Check auction bids are revealed.
    status: Get last reveals check status.
    all: Do steps from 1 to 3. (not 0)
  `;

  console.error(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const id = config.str(0);

  if (!id)
    help();

  const client = wallet.client();
  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, `check-reveals-${id}`);
  const fileOwnNames = common.namesDumpFile(dataRoot, id);
  const fileFiltered = path.join(dataDir, '1-filter-reveals.json');
  const fileByHoursClosed = path.join(dataDir, '2-sorted-by-reveal-end.json');
  const fileRevealed = path.join(dataDir, '3-revealed.json');
  const fileNeedsReveals = path.join(dataDir, '3-needs-reveals.json');

  await fs.mkdirp(dataDir);

  const step = config.str(1, 'all');

  let fallthrough = config.bool('all', false);

  switch (step) {
    case '0':
    case 'dump': {
      console.log('Getting wallet names...');

      await spawn(common.execs.dump, ['names', id], {
        env: cfg.configToENV(config)
      });

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      const data = await readJSON(fileOwnNames, true);
      console.log('Filtering names in reveal...');
      const filtered = data.filter(d => d.state === 'REVEAL');
      await writeJSON(fileFiltered, filtered, true);

      if (!fallthrough)
        break;
    }

    case '2':
    case 'sort': {
      const data = await readJSON(fileFiltered, true);
      console.log('Sorting by height...');
      data.sort((a, b) => {
        return a.stats.hoursUntilClose - b.stats.hoursUntilClose;
      });

      await writeJSON(fileByHoursClosed, data, true);

      if (!fallthrough)
        break;
    }

    case '3':
    case 'check-reveals': {
      const data = await readJSON(fileByHoursClosed, true);

      console.log('Gathering auction information...');

      const revealed = [];
      const needsReveals = [];

      for (const info of data) {
        const name = info.name;
        const auction = await wallet.getAuctionInfo(client, id, name);

        if (auction.state !== 'REVEAL')
          console.log('Names dump has expired:', auction.name, auction.state);

        let needsReveal = 0;
        for (const bid of auction.bids) {
          if (bid.own === false)
            continue;

          needsReveal++;
        }

        for (const reveal of auction.reveals) {
          if (reveal.own === false)
            continue;

          needsReveal--;
        }

        if (needsReveal)
          needsReveals.push(info);
        else
          revealed.push(info);
      }

      await writeJSON(fileNeedsReveals, needsReveals, true);
      await writeJSON(fileRevealed, revealed, true);

      if (!fallthrough)
        break;
    }

    case 'status': {
      const revealed = await readJSON(fileRevealed, true);
      const needsReveals = await readJSON(fileNeedsReveals, true);

      console.log(`
        Total: ${revealed.length + needsReveals.length}
        Revealed: ${revealed.length}
        Needs Reveal: ${needsReveals.length}
      `);
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
