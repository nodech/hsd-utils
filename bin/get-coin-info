#!/usr/bin/env node

'use strict';

const assert = require('assert');
const os = require('os');
const path = require('path');
const fs = require('bfile');
const common = require('../lib/common');
const cfg = require('../lib/config');
const {writeJSON, readJSON, spawn} = require('../lib/util');

const SPENDABLES = new Set(['NONE', 'OPEN', 'REDEEM']);

class BalanceInfo {
  constructor() {
    this.confirmedCoins = 0;
    this.unconfirmedCoins = 0;

    this.confirmedSpendableCoins = 0;
    this.unconfirmedSpendableCoins = 0;

    this.confirmedSpendableBalance = 0;
    this.unconfirmedSpendableBalance = 0;

    this.confirmedBalance = 0;
    this.unconfirmedBalance = 0;

    this.confirmedLockedBalance = 0;
    this.unconfirmedLockedBalance = 0;

    this.confirmedOpenCoins = 0;
    this.unconfirmedOpenCoins = 0;
    this.confirmedNonZeroOpenCoins = 0;
    this.unconfirmedNonZeroOpenCoins = 0;

    this.confirmedBidCoins = 0;
    this.unconfirmedBidCoins = 0;
    this.confirmedBidBalance = 0;
    this.unconfirmedBidBalance = 0;

    this.confirmedRevealCoins = 0;
    this.unconfirmedRevealCoins = 0;
    this.confirmedRevealBalance = 0;
    this.unconfirmedRevealBalance = 0;

    this.confirmedUpdateableCoins = 0;
    this.unconfirmedUpdateableCoins = 0;
    this.confirmedUpdateableBalance = 0;
    this.unconfirmedUpdateableBalance = 0;

    this.confirmedTransferCoins = 0;
    this.unconfirmedTransferCoins = 0;
    this.confirmedTransferBalance = 0;
    this.unconfirmedTransferBalance = 0;

    this.confirmedFinalizeCoins = 0;
    this.unconfirmedFinalizeCoins = 0;
    this.confirmedFinalizeBalance = 0;
    this.unconfirmedFinalizeBalance = 0;
  }

  addCoin(coin) {
    this.unconfirmedCoins += 1;
    this.unconfirmedBalance += coin.value;

    if (coin.height !== -1) {
      this.confirmedCoins += 1;
      this.confirmedBalance += coin.value;
    }

    if (SPENDABLES.has(coin.covenant.action)) {
      this.unconfirmedSpendableCoins++;
      this.unconfirmedSpendableBalance += coin.value;

      if (coin.height !== -1) {
        this.confirmedSpendableCoins++;
        this.confirmedSpendableBalance += coin.value;
      }

      if (coin.covenant.action === 'OPEN') {
        this.unconfirmedOpenCoins++;

        if (coin.value !== 0)
          this.unconfirmedNonZeroOpenCoins++;

        if (coin.height !== -1) {
          this.confirmedOpenCoins++;

          if (coin.value !== 0)
            this.confirmedNonZeroOpenCoins++;
        }
      }
      return;
    }

    this.unconfirmedLockedBalance += coin.value;

    if (coin.height !== -1)
      this.confirmedLockedBalance += coin.value;

    switch (coin.covenant.action) {
      case 'BID': {
        this.unconfirmedBidCoins++;
        this.unconfirmedBidBalance += coin.value;

        if (coin.height !== -1) {
          this.confirmedBidCoins++;
          this.confirmedBidBalance += coin.value;
        }
        break;
      }

      case 'REVEAL': {
        this.unconfirmedRevealCoins++;
        this.unconfirmedRevealBalance += coin.value;

        if (coin.height !== -1) {
          this.confirmedRevealCoins++;
          this.confirmedRevealBalance += coin.value;
        }
        break;
      }

      case 'RENEW':
      case 'UPDATE':
      case 'REGISTER': {
        this.unconfirmedUpdateableCoins++;
        this.unconfirmedUpdateableBalance += coin.value;

        if (coin.height !== -1) {
          this.confirmedUpdateableCoins++;
          this.confirmedUpdateableBalance += coin.value;
        }
        break;
      }

      case 'TRANSFER': {
        this.unconfirmedTransferCoins++;
        this.unconfirmedTransferBalance += coin.value;

        if (coin.height !== -1) {
          this.confirmedTransferCoins++;
          this.confirmedTransferBalance += coin.value;
        }
        break;
      }

      case 'FINALIZE': {
        this.unconfirmedFinalizeCoins++;
        this.unconfirmedFinalizeBalance += coin.value;
        this.unconfirmedUpdateableCoins++;
        this.unconfirmedUpdateableBalance += coin.value;

        if (coin.height !== -1) {
          this.confirmedFinalizeCoins++;
          this.confirmedFinalizeBalance += coin.value;
          this.confirmedUpdateableCoins++;
          this.confirmedUpdateableBalance += coin.value;
        }
        break;
      }

      default: {
        console.log(coin);
        throw new Error('Not impl yet.');
      }
    }
  }

  toJSON() {
    const balance = {
      coin: this.unconfirmedCoins,
      unconfirmed: this.unconfirmedBalance,
      confirmed: this.confirmedBalance,
      lockedUnconfirmed: this.unconfirmedLockedBalance,
      lockedConfirmed: this.confirmedLockedBalance
    };

    const spendableCoins = {
      coin: this.confirmedSpendableCoins,
      opens: this.confirmedOpenCoins,
      nonzeroOpens: this.confirmedNonZeroOpenCoins
    };

    const unconfirmedSpendableCoins = {
      coin: this.unconfirmedSpendableCoins,
      opens: this.unconfirmedOpenCoins,
      nonzeroOpens: this.unconfirmedNonZeroOpenCoins
    };

    const lockedCoins = {
      lockedCoins: this.confirmedLockedCoins,
      bids: this.confirmedBidCoins,
      reveals: this.confirmedRevealCoins,
      transfers: this.confirmedTransferCoins,
      finalizes: this.confirmedFinalizeCoins,
      updatables: this.confirmedUpdateableCoins
    };

    const unconfirmedLockedCoins = {
      lockedCoins: this.unconfirmedLockedCoins,
      bids: this.unconfirmedBidCoins,
      reveals: this.unconfirmedRevealCoins,
      transfers: this.unconfirmedTransferCoins,
      finalizes: this.unconfirmedFinalizeCoins,
      updatables: this.unconfirmedUpdateableCoins
    };

    const spendableBalance = {
      confirmed: this.confirmedSpendableBalance,
      unconfirmed: this.unconfirmedSpendableBalance
    };

    const lockedBalances = {
      lockedBalance: this.confirmedLockedBalance,
      bids: this.confirmedBidBalance,
      reveals: this.confirmedRevealBalance,
      transfers: this.confirmedTransferBalance,
      finalizes: this.confirmedFinalizeBalance,
      updatables: this.confirmedUpdateableBalance
    };

    const unconfirmedLockedBalances = {
      lockedBalance: this.unconfirmedLockedBalance,
      bids: this.unconfirmedBidBalance,
      reveals: this.unconfirmedRevealBalance,
      transfers: this.unconfirmedTransferBalance,
      finalizes: this.unconfirmedFinalizeBalance,
      updatables: this.unconfirmedUpdateableBalance
    };

    return {
      balance,
      coins: {
        spendable: {
          confirmed: spendableCoins,
          unconfirmed: unconfirmedSpendableCoins
        },
        locked: {
          confirmed: lockedCoins,
          unconfirmed: unconfirmedLockedCoins
        }
      },
      balances: {
        spendable: spendableBalance,
        locked: {
          confirmed: lockedBalances,
          unconfirmed: unconfirmedLockedBalances
        }
      }
    };
  }
}

function help() {
  const help = `./bin/get-coin-info WALLET_ID [STEP] [OPTIONS]
  OPTIONS:
    --all - Do every step from STEP to the last.
    --from-chain-dump
    --format  - format numbers.

  STEPS:
    0, dump: Dump all coins for the wallet.
    1, sum: Summarize information.
    status: Get status.
    all: Do steps from 1. (not 0)
  `;

  console.error(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const id = config.str(0);

  if (!id)
    help();

  const fromChainDump = config.bool('from-chain-dump', false);
  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, `get-coin-info-${id}`);
  const format = config.bool('format', false);

  let fileCoins = common.coinsDumpFile(dataRoot, id);

  if (fromChainDump)
    fileCoins = common.chainCoinsDumpFile(dataRoot, id);

  const fileSummed = path.join(dataDir, '1-summary.json');

  await fs.mkdirp(dataDir);

  const step = config.str(1, 'all');

  let fallthrough = config.bool('all', false);

  switch (step) {
    case '0':
    case 'dump': {
      if (fromChainDump) {
        throw new Error(
          'Please execute ./bin/dump-coins-low before and/or skip step 0/dump.'
        );
      }

      console.log('Getting wallet coins...');
      const env = cfg.configToENV(config);

      await Promise.all([
        spawn(common.execs.dumpBlockTimes, null, { env }),
        spawn(common.execs.dump, ['coins', id], { env })
      ]);

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'sum': {
      const info = new BalanceInfo();
      const data = await readJSON(fileCoins, true);

      for (const coin of data)
        info.addCoin(coin);

      await writeJSON(fileSummed, info, false);

      if (!fallthrough)
        break;
    }

    case 'status': {
      let info = await readJSON(fileSummed, false);

      if (format)
        info = formatInfo(info);

      console.log(JSON.stringify(info, null, 2));
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});

function formatNumber(number, locale) {
  return number.toLocaleString(locale);
}

function formatBalance(balance, locale) {
  return (balance / 1e6).toLocaleString(locale, {
    maximumFractionDigits: 6
  }) + ' HNS';
}

function parseNums(obj, formatFn, locale) {
  if (typeof obj === 'number')
    return formatFn(obj, locale);

  assert(typeof obj === 'object', 'obj needs to be an object.');

  const copy = {};
  for (const key of Object.keys(obj))
    copy[key] = parseNums(obj[key], formatFn, locale);

  return copy;
}

function formatInfo(info, locale) {
  const balance = {
    coin: formatNumber(info.balance.coin, locale),
    unconfirmed: formatBalance(info.balance.unconfirmed, locale),
    confirmed: formatBalance(info.balance.confirmed, locale),
    lockedUnconfirmed: formatBalance(info.balance.lockedUnconfirmed, locale),
    lockedConfirmed: formatBalance(info.balance.lockedConfirmed, locale)
  };

  const coins = parseNums(info.coins, formatNumber, locale);
  const balances = parseNums(info.balances, formatBalance, locale);

  return {
    balance,
    coins,
    balances
  };
}
