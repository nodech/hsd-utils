#!/usr/bin/env node

'use strict';

const os = require('os');
const path = require('path');
const fs = require('bfile');
const common = require('../lib/common');
const cfg = require('../lib/config');
const node = require('../lib/node');
const {writeJSON, readJSON, spawn} = require('../lib/util');
const {Network} = require('hsd');

function help() {
  const help = './bin/check-opens-unowned WALLET_ID STEP [OPTIONS]';

  console.error(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const id = config.str(0);

  if (!id)
    help();

  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, `check-opens-unopen-${id}`);
  const fileCoins = common.coinsDumpFile(dataRoot, id);
  const fileOpens = path.join(dataDir, '1-filter-opens.json');
  const fileUnowned = path.join(dataDir, '2-unowned-opens.json');
  const fileNames = path.join(dataDir, 'status-names.json');

  await fs.mkdirp(dataDir);

  const network = Network.get(config.get('network', 'main'));
  const client = node.client();
  let currentTipHeight = config.int(2, -1);

  if (currentTipHeight === -1)
    currentTipHeight = (await client.getInfo()).chain.height;

  const revealStart = currentTipHeight - network.names.revealPeriod;
  const bidStart = revealStart - network.names.biddingPeriod;

  const step = config.str(1, 'all');
  let fallthrough = config.bool('all', false);

  switch (step) {
    case '0':
    case 'dump': {
      console.log('Getting wallet UTXO...');

      const env = cfg.configToENV(config);
      await Promise.all([
        spawn(common.execs.dump, ['coins', id], { env })
      ]);

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      if (!await node.hasDumpPlugin(client))
        throw new Error('Can not filter w/o dump plugin.');

      console.log('Start filtering...');
      const data = await readJSON(fileCoins, true);
      console.log(`Current tip: ${currentTipHeight}.`);
      console.log(`Filtering OPEN utxos before ${bidStart}`);
      console.log(`Total utxos to filter: ${data.length}...`);

      const opens = [];
      for (const coin of data) {
        if (coin.covenant.action !== 'OPEN')
          continue;

        // mempool
        if (coin.height === -1)
          continue;

        if (coin.height >= bidStart)
          continue;

        opens.push(coin.covenant.items[0]);
      }

      await writeJSON(fileOpens, opens, false);

      if (!fallthrough)
        break;
    }

    case '2':
    case 'unowned': {
      const opens = await readJSON(fileOpens);
      console.log(`Checking unowned names, total: ${opens.length}.`);
      const unowned = [];

      for (const hash of opens) {
        const info = await node.getNameByHash(
          client,
          hash,
          currentTipHeight
        );

        if (!info)
          unowned.push(hash);
      }

      await writeJSON(fileUnowned, unowned);

      if (!fallthrough)
        break;
    }

    case 'status': {
      const unowned = await readJSON(fileUnowned);
      const names = [];

      for (const hash of unowned) {
        const name = await client.execute('getnamebyhash', [hash]);
        names.push(name);
      }

      console.log(`Total: ${unowned.length}.`);
      await writeJSON(fileNames, names);
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
