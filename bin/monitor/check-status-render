#!/usr/bin/env node

'use strict';

const assert = require('bsert');
const cfg = require('../../lib/config');
const {sizeUnits, timeUnits} = require('../../lib/util');
const ui = require('../../lib/ui');
const {widgets, color} = ui;
const {BG, FG} = color;

const COLOR_LIST = ui.defaultColorList;

let WIDTH = 60;

(async () => {
  const config = cfg.parse();

  const name = config.str(0, 'HSD');
  WIDTH = config.int('width', 60);
  const forcetty = config.bool('forcetty', false);
  const limit = config.int('limit', 10);

  const info = await readJSONFromStdin();

  if (forcetty)
    process.stdout.isTTY = true;

  const {
    timestamp,
    memory,
    disk,
    node,
    wallet,
    walletHTTP
  } = info;

  const date = new Date(timestamp);
  console.log(`--- ${date} --- `);
  console.log(`--- ${name} ---`);
  console.log('--- RAM  ---');
  generic2Bar(memory, 'RAM:  ');
  if (node) {
    usedRam('used: ', node, memory.used);
    usedRam('heap: ', node, node.info.memory.total * 1024);
  }

  console.log('--- Disk ---');
  generic2Bar(disk.disk, 'DISK: ');

  usedDisk({
    prefix: 'used: ',
    diskAll: disk,
    total: disk.disk.used,
    fille: false
  });

  usedDisk({
    prefix: 'proj: ',
    diskAll: disk,
    total: disk.hsd.total + disk.pm2logs,
    fill: true
  });

  if (node) {
    console.log(`--- Node - ${node.info.version} ---`);
    syncBar({
      prefix: 'sync: ',
      height: node.info.chain.height,
      tipHeight: node.bestHeight
    });
    inOut('pool: ', node.info.pool.inbound, node.info.pool.outbound);
    mempool('memp: ', node.info.mempool);
  }

  if (disk.manifests) {
    console.log('--- Manifests ---');
    const headers = [
      { text: 'chain', pc: 33 },
      { text: 'wallet', pc: 33 },
      { text: 'blocks', pc: 33 }
    ];

    const {chain, wallet, blocks} = disk.manifests;

    widgets.table({
      width: WIDTH,
      headers,
      rows: [{
        chain: formatManifestSize(chain),
        wallet: formatManifestSize(wallet),
        blocks: formatManifestSize(blocks)
      }]
    });
  }

  if (node && wallet) {
    console.log('--- Wallet ---');
    syncBar({
      prefix: 'sync: ',
      height: wallet.height,
      tipHeight: node.info.chain.height
    });

    console.log('');
    balance(wallet.wallet.balance);
    console.log('');
  }

  if (walletHTTP) {
    httpStats(walletHTTP, limit);
  }
})().catch((err) => {
  console.error(err.stack);
});

/* eslint-disable max-len */
function generic2Bar(diskram, prefix) {
  const used = diskram.used / diskram.total * 100;

  const color = {
    bg: BG.GREEN,
    fg: FG.BLACK
  };

  if (used > 50)
    color.bg = BG.YELLOW;

  if (used > 75)
    color.bg = BG.RED;

  widgets.barline({
    width: WIDTH,
    prefix: prefix,
    suffix: `${sizeUnits(diskram.total).padStart(10)}`,
    defaultText: sizeUnits(diskram.available),
    colorFn: ui.util.nextColor([color]),
    items: [{
      text: sizeUnits(diskram.used),
      value: diskram.used
    }],
    total: diskram.total
  });
}

function usedDisk(options) {
  const prefix = options.prefix;
  const diskAll = options.diskAll;
  const total = options.total;
  const fill = options.fill;
  const pm2 = diskAll.pm2logs;
  const hsd = { ...diskAll.hsd, pm2 };

  delete hsd.total;

  const items = [];

  for (const [name, value] of Object.entries(hsd)) {
    items.push({
      text: name + `(${sizeUnits(value)})`,
      value: value
    });
  }

  items.sort((a, b) => {
    return b.value - a.value;
  });

  widgets.barline({
    width: WIDTH,
    prefix: prefix,
    suffix: `${sizeUnits(total).padStart(10)}`,
    defaultText: 'sys/other',
    colors: COLOR_LIST,
    fill,
    total,
    items
  });
}

function usedRam(prefix, node, total) {
  const memory = node.info.memory;

  const mb = 1024;
  const items = [];

  const jsHeapTotal = memory.jsHeapTotal * mb;
  const nativeHeap = memory.nativeHeap * mb;

  items.push({
    text: `jsheap ${sizeUnits(jsHeapTotal)}`,
    value: jsHeapTotal
  });

  items.push({
    text: `natheap ${sizeUnits(nativeHeap)}`,
    value: memory.nativeHeap * mb
  });

  widgets.barline({
    width: WIDTH,
    prefix: prefix,
    suffix: `${sizeUnits(total).padStart(10)}`,
    defaultText: 'other',
    colors: COLOR_LIST,
    total,
    items
  });
}

function syncBar(options) {
  const {prefix, height, tipHeight} = options;

  const color = {
    bg: BG.GREEN,
    fg: FG.BLACK
  };

  if (tipHeight < height)
    color.bg = BG.YELLOW;

  if (height < tipHeight / 2)
    color.bg = BG.RED;

  const items = [{
    text: `${height}`,
    value: height
  }];

  widgets.barline({
    width: WIDTH,
    prefix: prefix,
    suffix: `${(height / tipHeight * 100).toFixed(0)}%`.padStart(4),
    defaultText: `${tipHeight}`,
    colorFn: ui.util.nextColor([color]),
    items,
    total: tipHeight
  });
}

function inOut(prefix, inValue, outValue) {
  const items = [{
    text: `in(${inValue})`,
    value: inValue
  }, {
    text: `out(${outValue})`,
    value: outValue
  }];

  const colors = [{
    bg: BG.MAGENTA,
    fg: FG.BLACK
  }, {
    bg: BG.CYAN,
    fg: FG.BLACK
  }];

  const total = inValue + outValue;

  widgets.barline({
    width: WIDTH,
    fill: true,
    suffix: `${total}`.padStart(3).padEnd(4),
    colorFn: ui.util.nextColor(colors),
    prefix,
    items,
    total
  });
}

function mempool(prefix, mempool) {
  const items = [{
    text: `tx(${mempool.tx})`,
    value: mempool.tx
  }, {
    text: `orph(${mempool.orphans})`,
    value: mempool.orphans
  }];

  const colors = [{
    bg: BG.BLUE,
    fg: FG.BLACK
  }, {
    bg: BG.RED,
    fg: FG.BLACK
  }];

  const total = mempool.tx + mempool.orphans;

  widgets.barline({
    width: WIDTH,
    fill: true,
    suffix: `${total}`.padStart(3).padEnd(4),
    colorFn: ui.util.nextColor(colors),
    prefix,
    items,
    total
  });
}

function balance(balance) {
  const headers = [
    { text: 'coin', pc: 20 },
    { text: 'tx', pc: 20 },
    { text: 'confirmed', pc: 30 },
    { text: 'locked', pc: 30 }
  ];

  const formatter = new Intl.NumberFormat(undefined, {
    maximumFractionDigits: 6
  });

  const confirmed = (balance.confirmed - balance.lockedConfirmed) / 1e6;
  const locked = balance.lockedConfirmed / 1e6;

  const values = {
    coin: balance.coin.toLocaleString(),
    tx: balance.tx.toLocaleString(),
    confirmed: formatter.format(confirmed),
    locked: formatter.format(locked)
  };

  widgets.table({
    width: WIDTH,
    headers,
    rows: [
      values
    ]
  });
}

function httpStats(http, limit) {
  const duration = http.duration;
  const requestEntries = http.requests;

  if (!http.requests)
    return;

  console.log(`Last HTTP requests (${requestEntries.length})(${timeUnits(duration)}):`);

  const countByEndpoint = new Map();
  const statusesByEndpoint = new Map();

  for (const entry of requestEntries) {
    const endpoint = entry.request.pathname;
    const status = entry.response.status;

    // count per endpoint
    const endpointCount = countByEndpoint.get(endpoint) || 0;
    countByEndpoint.set(endpoint, endpointCount + 1);

    // collect statuses per endpoint
    const endpointStatuses = statusesByEndpoint.get(endpoint) || new Map();
    const endpointStatusCount = endpointStatuses.get(status) || 0;
    endpointStatuses.set(status, endpointStatusCount + 1);
    statusesByEndpoint.set(endpoint, endpointStatuses);
  }

  // sort count per endpoint
  const endpointEntries = Array.from(countByEndpoint.entries());
  endpointEntries.sort((a, b) => {
    return b[1] - a[1];
  });

  // sort status counts.
  const statusBoxEntries = new Map();
  for (const [endpoint , statuses] of statusesByEndpoint.entries()) {
    const statusEntries = Array.from(statuses.entries());

    statusEntries.sort((a, b) => {
      return b[1] - a[1];
    });

    statusBoxEntries.set(endpoint, statusEntries);
  }

  assert(endpointEntries.length === statusBoxEntries.size);

  // Table rows
  const endpointNNumberRenders = [];
  const statusRenders = [];

  // Collect the top N endpoints
  for (let i = 0; i < limit; i++) {
    const entry = endpointEntries[i];

    if (!entry)
      break;

    const endpoint = entry[0];
    const count = entry[1];
    const statuses = statusBoxEntries.get(endpoint);

    const endpointOut = collectOut();
    const statusesOut = collectOut();

    const endpointWidth = Math.floor(WIDTH * 0.7);
    const statusWidth = WIDTH - endpointWidth;

    // render endpoint box
    endpointOut.write('  ');
    widgets.overlapBox({
      out: endpointOut,
      width: endpointWidth - 2,
      boxPercent: count / requestEntries.length,
      text: endpoint + ' - ' + count,
      textColor: FG.BLACK,
      defaultTextColor: FG.WHITE,
      boxColor: BG.GREEN,
      nl: false
    });

    endpointNNumberRenders.push(endpointOut.render());

    // render status boxes
    const total = statuses.reduce((acc, [status, count]) => {
      return acc + count;
    }, 0);

    const entries = statuses.map(([status, count]) => {
      return {
        text: `${status} - ${count}`,
        value: count,
        code: status
      };
    });

    const colorByStatus = (item) => {
      const entry = item.source;
      const code = entry.code;

      if (code < 200)
        return { bg: BG.WHITE, fg: FG.BLACK };

      if (code >= 200 && code < 300)
        return { bg: BG.GREEN, fg: FG.BLACK };

      if (code >= 300 && code < 400)
        return { bg: BG.BLUE, fg: FG.BLACK };

      if (code >= 400 && code < 500)
        return { bg: BG.YELLOW, fg: FG.BLACK };

      if (code >= 500)
        return { bg: BG.RED, fg: FG.BLACK };

      return { bg: BG.MAGENTA, fg: FG.BLACK };
    };

    widgets.barline({
      out: statusesOut,
      width: statusWidth,
      fill: true,
      colorFn: colorByStatus,
      total,
      items: entries,
      nl: false
    });

    statusRenders.push(statusesOut.render());
  }

  widgets.table({
    width: WIDTH,
    center: false,
    headers: [{
      text: 'count',
      pc: 70
    }, {
      text: 'status',
      pc: 30
    }],
    rows: endpointNNumberRenders.map((endpoint, i) => {
      return {
        count: endpoint,
        status: statusRenders[i]
      };
    })
  });
}

/** eslint-enable max-len */

async function readJSONFromStdin() {
  const stdin = process.stdin;
  const chunks = [];

  stdin.resume();
  stdin.setEncoding('utf8');

  for await (const chunk of stdin) {
    chunks.push(chunk);
  }

  return JSON.parse(chunks.join(''));
}

function collectOut() {
  const written = [];

  return {
    write(str) {
      written.push(str);
    },
    render() {
      return written.join('');
    }
  };
}

function formatManifestSize(size) {
  if (size > 1024 * 512)
    return color.redText(sizeUnits(size));

  if (size > 1024 * 128)
    return color.yellowText(sizeUnits(size));

  return color.greenText(sizeUnits(size));
}
