#!/usr/bin/env node

'use strict';

const assert = require('bsert');
const path = require('path');
const fs = require('bfile');
const cfg = require('../../lib/config');
const wallet = require('../../lib/wallet');
const node = require('../../lib/node');
const {du, exec, sizeUnits, amount, timeUnits} = require('../../lib/util');
const os = require('os');

function help() {
  const help = `./bin/check-status HSD_PATH WALLET_ID

  NOTE: expects HSD_WALLET_API_KEY/HSD_NODE_API_KEY to be defined.
  NOTE: If HOME is defined, it will also check pm2 logs.`;

  console.error(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const hsdPath = config.str(0);
  const id = config.str(1);

  if (!hsdPath || !id)
    help();

  const allApiKey = config.str('api-key');
  const walletApiKey = config.str('wallet-api-key', allApiKey);
  const nodeApiKey = config.str('node-api-key', allApiKey);
  const walletAdminToken = config.str('wallet-admin-token');
  const json = config.bool('json', false);
  const requestLogEntries = config.int('request-log-entries', 5000);
  const requestLog = config.int('request-log', 60 * 60);

  assert(await fs.exists(hsdPath), `"${hsdPath}" does not exist.`);
  assert(await fs.exists(path.join(hsdPath, 'chain')),
    `"${hsdPath}/chain" does not exist.`);

  const nodeClient = node.client({
    apiKey: nodeApiKey
  });

  const walletClient = wallet.client({
    apiKey: walletApiKey,
    token: walletAdminToken
  });

  const info = {
    timestamp: Date.now(),
    memory: await getMemoryInfo(),
    disk: {
      disk: await getSystemInfo(hsdPath),
      pm2logs: await getPM2Logs(),
      hsd: await getChainSizes(hsdPath),
      manifests: await getManifestSizes(hsdPath)
    },
    node: null,
    wallet: null,
    walletHTTP: null
  };

  try {
    info.node = await getNodeInfo(nodeClient);
  } catch (e) {
    ;
  }

  try {
    info.wallet = await getWalletInfo(walletClient, id);
  } catch (e) {
    ;
  }

  info.walletHTTP = {
    duration: requestLog,
    entries: requestLogEntries,
    requests: await getLastRequests(hsdPath, requestLogEntries)
  };

  if (json) {
    console.log(JSON.stringify(info, null, 2));
    return;
  }

  logMemory(info.memory);
  logDisk(info.disk);
  logNodeInfo(info.memory, info.node);
  logWalletInfo(info.node, info.wallet);
  logLastRequests(info.walletHTTP.requests, requestLogEntries, requestLog);
})().catch((e) => {
  console.error(e);
  process.exit(1);
});

/*
 * Log stuff
 */

/* eslint-disable max-len */
function logMemory(mem) {
  console.log(`Memory
  used: ${sizeUnits(mem.used)} / ${sizeUnits(mem.total)} (${pc(mem.used, mem.total)})
  free: ${sizeUnits(mem.available)} / ${sizeUnits(mem.total)} (${pc(mem.available, mem.total)})`);
}

function logDisk({ disk, pm2logs, hsd, manifests }) {
  console.log(`Disk
  used: ${sizeUnits(disk.used)} / ${sizeUnits(disk.total)} (${pc(disk.used, disk.total)})
  free: ${sizeUnits(disk.available)} / ${sizeUnits(disk.total)} (${pc(disk.available, disk.total)})

  PM2 Logs: ${sizeUnits(pm2logs)} (${pc(pm2logs, disk.used)} of the used)
  HSD: ${sizeUnits(hsd.total)} (${pc(hsd.total, disk.used)} of the used)
  HSD:
    Chain: ${sizeUnits(hsd.chain)} (${pc(hsd.chain, hsd.total)} of the hsd)
    Tree: ${sizeUnits(hsd.tree)} (${pc(hsd.tree, hsd.total)})
    Blocks: ${sizeUnits(hsd.blocks)} (${pc(hsd.blocks, hsd.total)})
    Wallet: ${sizeUnits(hsd.wallet)} (${pc(hsd.wallet, hsd.total)})
    Logs: ${sizeUnits(hsd.logs)} (${pc(hsd.logs, hsd.total)})
    Unaccounted: ${sizeUnits(hsd.extra)} (${pc(hsd.extra, hsd.total)})
  MANIFESTS:
    Blocks: ${sizeUnits(manifests.blocks)}
    Chain: ${sizeUnits(manifests.chain)}
    Wallet: ${sizeUnits(manifests.wallet)}
  `);
}

function logNodeInfo(mem, nodeInfo) {
  if (!nodeInfo) {
    console.log('HSD memory');
    console.log('  Could not connect to the node.');
    return;
  }

  const {info, bestHeight} = nodeInfo;

  console.log(`HSD memory
  used: ${sizeUnits(info.memory.total * 1024)} / ${sizeUnits(mem.total)} (${pc(info.memory.total * 1024, mem.total)} of system)
  js-heap: ${sizeUnits(info.memory.jsHeap * 1024)} / ${sizeUnits(info.memory.total * 1024)} (${pc(info.memory.jsHeap, info.memory.total)})
  js-total-heap: ${sizeUnits(info.memory.jsHeapTotal * 1024)} / ${sizeUnits(info.memory.total * 1024)} (${pc(info.memory.jsHeapTotal, info.memory.total)})
  native-heap: ${sizeUnits(info.memory.nativeHeap * 1024)} / ${sizeUnits(info.memory.total * 1024)} (${pc(info.memory.nativeHeap, info.memory.total)})
  external: ${sizeUnits(info.memory.external * 1024)} / ${sizeUnits(info.memory.total * 1024)} (${pc(info.memory.external, info.memory.total)})`);

  const progress = (info.chain.progress * 100).toFixed(2);
  console.log(`HSD Node
  Height: ${info.chain.height} / ${bestHeight} (${pc(info.chain.height, bestHeight)}, by time: ${progress}%)
  Connections: ${info.pool.inbound} in, ${info.pool.outbound} out
  Mempool: ${info.mempool.tx}`);
}

function logWalletInfo(ninfo, winfo) {
  if (!winfo || !ninfo) {
    console.log('Wallet -');
    console.log('  Could not connect to the node or the wallet.');
    return;
  }

  const {wallet, height} = winfo;
  const {balance} = wallet;
  console.log(`Wallet "${wallet.id}"
  Height: ${height}/${ninfo.bestHeight} (${pc(height, ninfo.bestHeight)})
  TX Count: ${balance.tx}
  Coin Count: ${balance.coin}
  Confirmed Balance: ${amount(balance.confirmed)}
  Unconfirmed Balance: ${amount(balance.unconfirmed)}`);
}

function logLastRequests(requests, entries, range = 60 * 60) {
  if (!requests)
    return;

  const date = Date.now();
  const lastHour = date - (range * 1000);

  const lastRequestMap = requests
    .filter(req => req.timestamp > lastHour)
    .reduce((acc, req) => {
      const method = req.request.pathname;
      const count = acc.get(method) || 0;
      acc.set(method, count + 1);

      return acc;
    }, new Map());
  const requestList = Array.from(lastRequestMap.entries())
    .sort((a, b) => b[1] - a[1]);

  console.log(`Last WALLET requests in ${timeUnits(range)} filtered from last ${entries} entries:`);

  for (const request of requestList) {
    console.log(`  ${request[0]}: ${request[1]}`);
  }
}

/* eslint-enable max-len */

/*
 * Gather information
 */

/**
 * Returns system disk information in KB.
 * @returns {Object}
 */

async function getSystemInfo(path) {
  assert(await fs.exists(path), `"${path}" does not exist.`);

  const out = await exec(['df -Pk --', path]);
  const line = out.trim().split('\n')[1];

  if (!line) {
    throw new Error(
      'Could not get disk stats.\n'
      + `Check "df -Pk -- ${path}" returns at least one entry.`
    );
  }

  const info = line.trim().split(/\s+/);
  const used = parseInt(info[2], 10);
  const available = parseInt(info[3], 10);
  const total = used + available;

  return {
    used,
    available,
    total,
    capacity: info[4]
  };
}

async function getChainSizes(hsdPath) {
  const total = await du(hsdPath);
  const blocksPath = path.join(hsdPath, 'blocks');
  const walletPath = path.join(hsdPath, 'wallet');
  let blocks = 0;
  let wallet = 0;

  const chain = await du(path.join(hsdPath, 'chain'));
  const tree = await du(path.join(hsdPath, 'tree'));

  if (await fs.exists(blocksPath))
    blocks = await du(path.join(hsdPath, 'blocks'));

  if (await fs.exists(walletPath))
    wallet = await du(path.join(hsdPath, 'wallet'));

  const logs = await getChainLogs(hsdPath);

  const extra = total - chain - tree - blocks - wallet - logs;

  return {
    chain,
    tree,
    blocks,
    wallet,
    logs,
    total,
    extra
  };
}

async function getManifestFileSizes(dbPath) {
  const dir = await fs.readdir(dbPath);
  const regex = /^MANIFEST-\d+$/;

  const manifests = dir.filter(f => regex.test(f));
  const sizes = [];

  for (const manifest of manifests) {
    const manifestPath = path.join(dbPath, manifest);
    const size = await du(manifestPath);
    sizes.push(size);
  }

  return sizes;
}

async function getManifestSizes(hsdPath) {
  const blocksLDB = path.join(hsdPath, 'blocks', 'index');
  const chainLDB = path.join(hsdPath, 'chain');
  const walletLDB = path.join(hsdPath, 'wallet');

  let blocks = 0;
  let chain = 0;
  let wallet = 0;

  assert(await fs.exists(chainLDB), `"${chainLDB}" does not exist.`);
  assert(await fs.exists(walletLDB), `"${walletLDB}" does not exist.`);

  if (await fs.exists(blocksLDB))
    blocks = (await getManifestFileSizes(blocksLDB)).reduce((p, c) => p + c, 0);

  chain = (await getManifestFileSizes(chainLDB)).reduce((p, c) => p + c, 0);
  wallet = (await getManifestFileSizes(walletLDB)).reduce((p, c) => p + c, 0);

  return {
    blocks,
    chain,
    wallet
  };
}

/**
 * Gather log information for fullnode.
 * @param {String} hsdPath
 */

async function getChainLogs(hsdPath) {
  const files = await fs.readdir(hsdPath);
  const logRegex = /^([\w-]+)(?:_.*)?\.log$/;
  const logFiles = files.filter(f => logRegex.test(f));
  const all = await Promise.all(logFiles.map(f => du(path.join(hsdPath, f))));

  return all.reduce((p, c) => {
    return p + c;
  }, 0);
}

/**
 * Returns pm2logs directory size in KB.
 * @returns {Promise<Number?>}
 */

async function getPM2Logs() {
  const home = os.homedir();

  if (home == null)
    return 0;

  const pm2logPath = path.join(home, '.pm2', 'logs');

  if (await fs.exists(pm2logPath))
    return du(pm2logPath);

  return 0;
}

async function getMemoryInfo() {
  // Some parts of this code are based on
  // https://github.com/sebhildebrandt/systeminformation
  const rawMemInfo = await fs.readFile('/proc/meminfo', 'utf8');
  const lines = rawMemInfo.split('\n').map(l => l.trim()).filter(l => l !== '');
  const memInfo = lines.reduce((acc, line) => {
    const [key, value] = line.split(':').map(s => s.trim());
    const valueIsKb = key.endsWith('kB');

    acc[key.toLowerCase()] = parseInt(value, 10) * (valueIsKb ? 1024 : 1);
    return acc;
  }, {});

  const result = {
    total: os.totalmem(),
    free: os.freemem(),
    used: os.totalmem() - os.freemem(),

    active: os.totalmem() - os.freemem(),
    available: os.freemem(),
    buffers: 0,
    cached: 0,
    slab: 0,
    buffcache: 0,
    reclaimable: 0
  };

  result.total = memInfo['memtotal'];
  result.total = result.total ? result.total : os.totalmem();
  result.free = memInfo['memfree'];
  result.free = result.free ? result.free : os.freemem();
  result.used = result.total - result.free;

  result.buffers = memInfo['buffers'];
  result.buffers = result.buffers ? result.buffers : 0;
  result.cached = memInfo['cached'];
  result.cached = result.cached ? result.cached : 0;
  result.slab = memInfo['slab'];
  result.slab = result.slab ? result.slab : 0;
  result.buffcache = result.buffers + result.cached + result.slab;

  const available = memInfo['memavailable'];
  result.available = available ? available : result.free + result.buffcache;
  result.active = result.total - result.available;

  return {
    total: result.total,
    available: result.available,
    used: result.active
  };
}

async function getBestHeightGuess(nodeClient, currentHeight) {
  const peers = await nodeClient.execute('getpeerinfo');
  let best = currentHeight;

  for (const peer of peers) {
    best = Math.max(best, peer.startingheight);
    best = Math.max(best, peer.bestheight);
  }

  return best;
}

function pc(n, total) {
  return `${(n * 100 / total).toFixed(2)}%`;
}

async function getNodeInfo(nodeClient) {
  const info = await nodeClient.getInfo();
  const bestHeight = await getBestHeightGuess(nodeClient, info.chain.height);

  return {
    info,
    bestHeight
  };
}

async function getWalletInfo(wclient, wid) {
  const wallet = await wclient.getInfo(wid);

  await wclient.execute('selectwallet', [wid]);
  const rpcinfo = await wclient.execute('getwalletinfo');

  return {
    wallet,
    height: rpcinfo.height
  };
}

async function getLastRequests(hsdPath, entries = 5000) {
  const logFile = path.join(hsdPath, 'wallet-http.log');

  if (!await fs.exists(logFile))
    return null;

  // eslint-disable-next-line max-len
  const command = `tail -n ${entries} ${logFile} | grep -v '"method":"GET"' | grep '"type":"finish"'`;
  let out = '';

  try {
    out = await exec([command]);
  } catch (e) {
    ;
  }

  const lines = out.split('\n')
    .map(l => l.trim())
    .filter(l => l !== '')
    .map(l => JSON.parse(l));

  return lines;
}
