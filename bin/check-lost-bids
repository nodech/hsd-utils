#!/usr/bin/env node

'use strict';

const os = require('os');
const path = require('path');
const fs = require('bfile');
const common = require('../lib/common');
const cfg = require('../lib/config');
const node = require('../lib/node');
const {writeJSON, readJSON, spawn} = require('../lib/util');
const {Network} = require('hsd');

function help() {
  const help = `./bin/check-lost-bids WALLET_ID STEP [OPTIONS]
  OPTIONS:
    --all do from STEP to 4.

  STEPS:


  Diff STEPS:
    all: Do steps from 1 to 4. (exc 0)
    status: get summary of classified data.
  `;

  console.error(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const id = config.str(0);

  if (!id)
    help();

  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, `check-lost-bids-${id}`);
  const fileCoins = common.coinsDumpFile(dataRoot, id);
  const fileLost = path.join(dataDir, '1-filter-lost-utxos.json');
  const fileNeedsReveal = path.join(dataDir, '1-filter-needs-reveal.json');
  const fileByHeight = path.join(dataDir, '2-sorted-by-height.json');
  const fileRevealByHeight = path.join(dataDir,
                                       '2-sorted-by-height-reveal.json');

  await fs.mkdirp(dataDir);

  const network = Network.get(config.get('network', 'main'));
  const client = node.client();
  let currentTipHeight = config.int(2, -1);

  if (currentTipHeight === -1)
    currentTipHeight = (await client.getInfo()).chain.height;

  const revealStart = currentTipHeight - network.names.revealPeriod;
  const bidStart = revealStart - network.names.biddingPeriod;

  const step = config.str(1, 'all');
  let fallthrough = config.bool('all', false);

  switch (step) {
    case '0':
    case 'dump': {
      console.log('Getting wallet names...');

      const env = cfg.configToENV(config);

      await Promise.all([
        spawn(common.execs.dumpBlockTimes, null, { env }),
        spawn(common.execs.dump, ['coins', id], { env })
      ]);

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      if (!await node.hasDumpPlugin(client))
        throw new Error('Can not filter w/o dump plugin.');
      console.log('Start filtering...');
      const data = await readJSON(fileCoins, true);
      console.log(`Current tip: ${currentTipHeight}.`);
      console.log(`Filtering BID utxos before ${bidStart}/${revealStart}...`);

      const needsReveal = [];
      const lost = [];

      for (const coin of data) {
        if (coin.covenant.action !== 'BID')
          continue;

        // mempool
        if (coin.height === -1)
          continue;

        const hash = coin.covenant.items[0];
        const info = await node.getNameByHash(
          client,
          hash,
          coin.height,
          currentTipHeight
        );

        if (coin.height < bidStart) {
          coin.name = info.name;
          lost.push(coin);
          continue;
        }

        coin.ns = info;
        coin.name = info.name;

        if (info.state === 'CLOSED') {
          lost.push(coin);
          continue;
        }

        if (info.state === 'REVEAL') {
          needsReveal.push(coin);
          continue;
        }
      }

      await writeJSON(fileLost, lost, true);
      await writeJSON(fileNeedsReveal, needsReveal, true);

      if (!fallthrough)
        break;
    }

    case '2':
    case 'sort': {
      console.log('Start sorting...');
      const dataLost = await readJSON(fileLost, true);
      const dataReveals = await readJSON(fileNeedsReveal, true);
      console.log('Sorting lost by height...');

      dataLost.sort((a, b) => {
        return b.height - a.height;
      });

      console.log('Sorting reveal by close...');
      dataReveals.sort((a, b) => {
        return a.ns.stats.blocksUntilClose - b.ns.stats.blocksUntilClose;
      });

      console.log('Writing lost bids...');
      await writeJSON(fileByHeight, dataLost, true);
      console.log('Writing reveals...');
      await writeJSON(fileRevealByHeight, dataReveals, true);

      if (!fallthrough)
        break;
    }

    case 'status': {
      throw new Error('NO STAT');
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
