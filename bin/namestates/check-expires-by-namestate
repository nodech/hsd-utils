#!/usr/bin/env node

'use strict';

const assert = require('bsert');
const os = require('os');
const path = require('path');
const fs = require('bfile');
const paths = require('../../lib/paths');
const cfg = require('../../lib/config');
const {writeJSON, readJSON, spawn} = require('../../lib/util');

const CLAIM_END = 210240;

function filterClosed(from) {
  const closedNames = [];

  for (const name of from) {
    if (name.state !== 'CLOSED')
      continue;

    if (name.claimed) {
      const start = name.stats.renewalPeriodStart;
      const end = name.stats.renewalPeriodEnd;
      const tip = end - name.stats.blocksUntilExpire;

      const expireBlock = Math.max(end, CLAIM_END);
      const leftDays = (expireBlock - tip) / 144;

      name.stats = {
        renewalPeriodStart: start,
        renewalPeriodEnd: end,
        blocksUntilExpire: expireBlock - tip,
        daysUntilExpire: leftDays
      };
    }

    closedNames.push(name);
  }

  return closedNames;
}

function sortExpires(from) {
  return from.sort((a, b) => {
    return a.stats.renewalPeriodEnd - b.stats.renewalPeriodEnd;
  });
}

function sortFilterTransfers(from) {
  return from.filter(d => d.stats.transferLockupStart).sort((a, b) => {
    return a.stats.transferLockupStart - b.stats.transferLockupStart;
  });
}

function filterDays(from, days) {
  assert(days, 'days not found.');
  assert(typeof days === 'number', 'days is not a number');
  return from.filter(d => d.stats.daysUntilExpire <= days);
}

function classify(from) {
  const expired = from.filter(d => d.stats.daysUntilExpire <= 0);
  const inTransfer = from.filter((d) => {
    return d.stats.transferLockupStart && d.stats.daysUntilExpire > 0;
  });

  const needsRenew = from.filter((d) => {
    return !d.stats.transferLockupStart && d.stats.daysUntilExpire > 0;
  });

  const expiring = from.filter(d => d.stats.daysUntilExpire > 0);

  return {
    expired,
    inTransfer,
    needsRenew,
    expiring
  };
}

function help() {
  // eslint-disable-next-line max-len
  const help = `Usage: ./bin/namestates/check-expires-by-namestate WALLET_ID STEP [DAYS] [OPTIONS]
Dump expired, expiring (within DAYS) and in transfer names for wallet.

  OPTIONS:
    --all - Do every step from STEP to the last.

  STEPS:
    0, dump: Get wallet own names from wallet. (big wallet request)
    1, filter: Filter closed names (auction state).
    2, sort: Sort names by expires and list all transfer locks.
    3, filter-time: Filter names by expire time (in days).
    4, classify: Classify filtered name into: expired, in-transfer, needs-renew.
    status: Get last expires status.
    all: Do all steps from 1 to 4. (not 0)
  `;

  console.log(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const id = config.str(0);

  if (!id)
    help();

  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, `check-expiresnamestate-${id}`);
  const fileOwnNames = paths.namesDumpFile(dataRoot, id);
  const fileFiltered = path.join(dataDir, '1-filter-closed-names.json');
  const fileSortedExpires = path.join(dataDir, '2-sort-expires.json');
  const fileInTransferAll = path.join(dataDir, '2-in-transfer.json');

  const fileFilteredTime = path.join(dataDir, '3-filtered-time.json');
  const fileExpired = path.join(dataDir, '4-expired.json');
  const fileInTransfer = path.join(dataDir, '4-in-transfer.json');
  const fileNeedsRenew = path.join(dataDir, '4-needs-renew.json');
  const fileExpiring = path.join(dataDir, '4-expiring.json');
  const fileRenewRequests = path.join(dataDir, '4-renew-requests.json');
  const fileCancelRequests = path.join(dataDir, '4-cancel-requests.json');

  await fs.mkdirp(dataDir);

  const step = config.str(1, 'all');

  let fallthrough = config.bool('all', false);

  switch (step) {
    case '0':
    case 'dump': {
      console.log('Getting wallet names...');

      await spawn(paths.execs.dump, ['names', id], {
        env: cfg.configToENV(config)
      });

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      const data = await readJSON(fileOwnNames, true);
      console.log('Filtering closed names only...');
      await writeJSON(fileFiltered, filterClosed(data), true);

      if (!fallthrough)
        break;
    }

    case '2':
    case 'sort': {
      const data = await readJSON(fileFiltered, true);
      console.log('Sorting by expires...');
      await writeJSON(fileSortedExpires, sortExpires(data), true);

      console.log('Sorting by transfer request...');
      await writeJSON(fileInTransferAll, sortFilterTransfers(data), true);

      if (!fallthrough)
        break;
    }

    case '3':
    case 'filter-time': {
      const days = config.int(2, 30);
      const data = await readJSON(fileSortedExpires, true);

      console.log('Filtering by time...');
      await writeJSON(fileFilteredTime, {
        days: days,
        data: filterDays(data, days)
      }, false);

      if (!fallthrough)
        break;
    }

    case '4':
    case 'classify': {
      const {days, data} = await readJSON(fileFilteredTime, false);
      console.log('Classifying...');

      const {
        inTransfer,
        expired,
        needsRenew,
        expiring
      } = classify(data);

      await writeJSON(fileInTransfer, { days, data: inTransfer }, false);
      await writeJSON(fileExpired, { days, data: expired }, false);
      await writeJSON(fileNeedsRenew, { days, data: needsRenew }, false);
      await writeJSON(fileExpiring, { days, data: expiring }, false);

      if (!fallthrough)
        break;
    }

    case 'status': {
      const needsRenew = await readJSON(fileNeedsRenew, false);
      const inTransfer = await readJSON(fileInTransfer, false);
      const expired = await readJSON(fileExpired, false);

      let totalNames = 0;

      totalNames += needsRenew.data.length;
      totalNames += expired.data.length;
      totalNames += inTransfer.data.length;

      /* eslint-disable max-len */
      const out = `
  Wallet: ${id}.
  Total names expire(d): ${totalNames} in last ${needsRenew.days}.
   Expired: ${expired.data.length}
   Requested transfer: ${inTransfer.data.length} - will need cancel->renew, or finalize.
   Needs renew: ${needsRenew.data.length}`;
      /* eslint-enable max-len */

      console.log(out);
      fallthrough = true;
    }

    case 'status-renew': {
      const needsRenew = await readJSON(fileNeedsRenew, false);
      const names = new Set();

      for (const info of needsRenew.data)
        names.add(info.name);

      await writeJSON(fileRenewRequests, [...names]);

      if (!fallthrough)
        break;
    }

    case 'status-cancel': {
      const inTransfer = await readJSON(fileInTransfer, false);
      const names = new Set();

      for (const info of inTransfer.data)
        names.add(info.name);

      await writeJSON(fileCancelRequests, [...names]);
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
