#!/usr/bin/env node

'use strict';

const assert = require('bsert');
const fs = require('bfile');
const common = require('../../lib/common');
const paths = require('../../lib/paths');
const node = require('../../lib/node');
const util = require('../../lib/util');
const {writeJSON, readJSON} = util;

function help() {
  /* eslint-disable max-len */
  const help = `Usage: ./bin/namestates/check-reveals WALLET_ID STEP [OPTIONS]
Dump UTXOs that are in REVEAL state. Separate stuck based on MONTH(s) since they are in the state.

OPTIONS:
  --all do from STEP to end.
  --tip-height <number> - override tip height.
  --months     <number> - Months since in reveal state (default 1).

STEPS:
  1, filter: filter reveal utxos.

Diff STEPS:
  all: Do steps from 1 to end. (exc 0)
  status-redeem: get summary for redeems.
  status-register: get summary for registers.
`;

  /* eslint-enable max-len */
  console.error(help);
  process.exit(2);
}

(async () => {
  const {
    config,
    fthrough,
    id,
    network,
    nodeClient,
    root,
    step,
    tip
  } = await common.setupChecker(help);

  let fallthrough = fthrough;

  const files = paths.checkRevealsByCoinsDirs(root, id);
  await fs.mkdirp(files.dataDir);

  const months = config.uint('months', 1);
  const monthsDiff = months * 30 * 24 * 60 * 60;
  const now = Math.floor(Date.now() / 1000);

  switch (step) {
    case '0':
    case 'dump': {
      await common.dumpCoins(config, id);

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      if (!await node.hasDumpPlugin(nodeClient))
        throw new Error('Can not filter w/o dump plugin.');

      console.log('Start filtering...');
      const data = await readJSON(files.coins, true);
      console.log(`Current tip: ${tip}.`);

      const expired = [];
      const needsRedeem = [];
      const needsRegister = [];
      const stillRevealing = [];
      const unknown = [];

      for (const coin of data) {
        if (coin.covenant.action !== 'REVEAL')
          continue;

        // mempool
        if (coin.height === -1)
          continue;

        const hash = coin.covenant.items[0];
        const ns = await node.getNameStateByNameHash(
          nodeClient,
          hash,
          coin.height,
          tip
        );

        if (!ns || !ns.name) {
          console.log('Could not find: ', coin.hash, coin.index);
          continue;
        }

        coin.ns = ns.getJSON(tip, network);
        coin.name = ns.name.toString('binary');
        coin.time = await common.getBlockTimeByHeight(root, coin.height);

        if (ns.isExpired(tip, network)) {
          if (!isRevealTheWinner(coin)) {
            needsRedeem.push(coin);
            continue;
          }

          expired.push(coin);
          continue;
        }

        if (ns.isClosed(tip, network)) {
          if (!isRevealTheWinner(coin)) {
            needsRedeem.push(coin);
            continue;
          }

          needsRegister.push(coin);
          continue;
        }

        if (ns.isReveal(tip, network)) {
          stillRevealing.push(coin);
          continue;
        }

        unknown.push(coin);
      }

      await writeJSON(files.filter.expired, expired, true);
      await writeJSON(files.filter.needsRedeem, needsRedeem, true);
      await writeJSON(files.filter.needsRegister, needsRegister, true);
      await writeJSON(files.filter.stillRevealing, stillRevealing, true);
      await writeJSON(files.filter.unknown, unknown, true);

      if (!fallthrough)
        break;
    }

    case 'status':
      fallthrough = true;

    case 'status-redeem': {
      const needsRedeem = await readJSON(files.filter.needsRedeem, true);
      const totalRedeems = needsRedeem.length;
      let totalAmount = 0;
      let agedRedeemCount = 0;
      let agedAmount = 0;
      const agedRedeems = new Set();

      for (const coin of needsRedeem) {
        const closeHeight = getNSCloseHeight(coin, network);
        const time = await common.getBlockTimeByHeight(root, closeHeight);

        totalAmount += coin.value;

        // block must be available
        assert(time);

        if (time + monthsDiff > now)
          continue;

        agedAmount += coin.value;
        agedRedeemCount++;
        agedRedeems.add(coin.ns.name);
      }

      console.log(`Redeem - ${id}`);
      console.log(`  Total redeem: ${totalRedeems}.`);
      console.log(`  Total amount: ${util.amount(totalAmount)}.`);
      console.log(`  Aged redeem: ${agedRedeems.size} (${agedRedeemCount}).`);
      console.log(`  Aged amount: ${util.amount(agedAmount)}.`);

      await writeJSON(files.status.agedRedeems, [...agedRedeems], true);

      if (!fallthrough)
        break;
    }

    case 'status-register': {
      const needsRegister = await readJSON(files.filter.needsRegister, true);
      const totalRegisters = needsRegister.length;
      let totalAmount = 0;
      let agedRegisterCount = 0;
      let agedAmount = 0;
      const agedRegisters = new Set();

      for (const coin of needsRegister) {
        const closeHeight = getNSCloseHeight(coin, network);
        const time = await common.getBlockTimeByHeight(root, closeHeight);

        totalAmount += coin.value;

        // block must be available
        assert(time);

        if (time + monthsDiff > now)
          continue;

        agedAmount++;
        agedRegisterCount++;
        agedRegisters.add(coin.ns.name);
      }

      console.log(`Register - ${id}`);
      console.log(`  Total register: ${totalRegisters}.`);
      console.log(`  Total amount: ${util.amount(totalAmount)}.`);
      console.log(`  Aged registers: ${agedRegisters.size}`
                  + ` (${agedRegisterCount}).`);
      console.log(`  Aged amount: ${util.amount(agedAmount)}.`);

      await writeJSON(files.status.agedRegisters, [...agedRegisters], true);
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});

function isRevealTheWinner(coin) {
  if (coin.hash === coin.ns.owner.hash && coin.index === coin.ns.owner.index)
    return true;

  return false;
}

function getNSCloseHeight(coin, network) {
  const height = coin.ns.height;

  const {
    treeInterval,
    biddingPeriod,
    revealPeriod
  } = network.names;

  return height + treeInterval + biddingPeriod + revealPeriod;
}
