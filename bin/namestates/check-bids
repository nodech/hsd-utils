#!/usr/bin/env node

'use strict';

const fs = require('bfile');
const common = require('../../lib/common');
const paths = require('../../lib/paths');
const node = require('../../lib/node');
const {writeJSON, readJSON} = require('../../lib/util');

function help() {
  const help = `Usage: ./bin/namestates/check-bids WALLET_ID STEP [OPTIONS]
Dump bids that are lost or need reveal (within HOURS).

OPTIONS:
  --all do from STEP to 4.
  --tip-height <number> - override tip height.
  --hours <number>      - hours to filter (default 48).

HOURS - status specific, filter reveals which have less than HOURS left.

STEPS:
  1, filter: filter bids utxos.
  2, sort: sort lost and reveals.

Diff STEPS:
  status-reveal: get summary reveals.
  status-lost: get summary of lost bids.
`;

  console.error(help);
  process.exit(2);
}

(async () => {
  const {
    config,
    fthrough,
    id,
    network,
    nodeClient,
    root,
    step,
    tip
  } = await common.setupChecker(help);

  let fallthrough = fthrough;

  const files = paths.checkBidsByCoinsDirs(root, id);
  await fs.mkdirp(files.dataDir);

  const revealStart = tip - network.names.revealPeriod;
  const bidStart = revealStart - network.names.biddingPeriod;
  const hours = config.int('hours', 48);

  switch (step) {
    case '0':
    case 'dump': {
      await common.dumpCoins(config, id);

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      if (!await node.hasDumpPlugin(nodeClient))
        throw new Error('Can not filter w/o dump plugin.');

      console.log('Start filtering...');
      const coins = await readJSON(files.coins, true);
      console.log(`Current tip: ${tip}.`);
      console.log(`Filtering BID utxos before ${bidStart}/${revealStart}...`);

      const needsReveal = [];
      const lost = [];

      for (const coin of coins) {
        if (coin.covenant.action !== 'BID')
          continue;

        // mempool
        if (coin.height === -1)
          continue;

        const hash = coin.covenant.items[0];
        const ns = await node.getNameStateJSONByNameHash(
          nodeClient,
          hash,
          coin.height,
          tip
        );

        if (coin.height < bidStart) {
          coin.name = ns.name;
          lost.push(coin);
          continue;
        }

        if (!ns || !ns.name) {
          console.log('Could not find: ', coin.hash, coin.index);
          continue;
        }

        coin.ns = ns;
        coin.name = ns.name;

        if (ns.state === 'CLOSED') {
          lost.push(coin);
          continue;
        }

        if (ns.state === 'REVEAL') {
          needsReveal.push(coin);
          continue;
        }
      }

      await writeJSON(files.filter.lost, lost, true);
      await writeJSON(files.filter.needsReveal, needsReveal, true);

      if (!fallthrough)
        break;
    }

    case '2':
    case 'sort': {
      console.log('Start sorting...');
      const dataLost = await readJSON(files.filter.lost, true);
      const dataReveals = await readJSON(files.filter.needsReveal, true);
      console.log('Sorting lost by height...');

      dataLost.sort((a, b) => {
        return b.height - a.height;
      });

      console.log('Sorting reveal by close...');
      dataReveals.sort((a, b) => {
        return a.ns.stats.blocksUntilClose - b.ns.stats.blocksUntilClose;
      });

      console.log('Writing lost bids...');
      await writeJSON(files.sort.lostByHeight, dataLost, true);
      console.log('Writing reveals...');
      await writeJSON(files.sort.revealByHrsLeft, dataReveals, true);

      if (!fallthrough)
        break;
    }

    case 'status':
      fallthrough = true;

    case 'status-reveal': {
      const reveals = await readJSON(files.sort.revealByHrsLeft, true);

      const totalReveals = reveals.length;

      const names = new Set();

      for (const coin of reveals) {
        const untilClose = coin.ns.stats.hoursUntilClose;

        if (untilClose > hours)
          continue;

        names.add(coin.ns.name);
      }

      console.log(`
  Wallet: ${id}.
  Total bids that need reveal: ${totalReveals}.
  Bids that need reveal before ${hours} hours: ${names.size}.`
      );

      await writeJSON(files.status.revealRequests, [...names]);

      if (!fallthrough)
        break;
    }

    case 'status-lost': {
      const coins = await readJSON(files.sort.lostByHeight, true);
      let amount = 0;

      for (const coin of coins) {
        coin.time = await common.getBlockTimeByHeight(root, coin.height);
        amount += coin.value;
      }

      console.log(`
  Wallet: ${id}.
  Total lost amount: ${amount / 1e6} hns
  Total lost bids: ${coins.length}.`);

      await writeJSON(files.status.lostWithTime, true);
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
