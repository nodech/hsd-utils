#!/usr/bin/env node

'use strict';

const os = require('os');
const path = require('path');
const fs = require('bfile');
const paths = require('../../lib/paths');
const cfg = require('../../lib/config');
const {writeJSON, readJSON, spawn} = require('../../lib/util');

function help() {
  const help = `./bin/namestates/get-owned-names WALLET_ID STEP [OPTIONS]
  OPTIONS:
    --all - Do every step from STEP to the last.

  STEPS:
    all: Do all steps from 1 to 4. (not 0)
  `;

  console.log(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const id = config.str(0);

  if (!id)
    help();

  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, `get-owned-names-${id}`);
  const fileOwnNames = paths.namesDumpFile(dataRoot, id);
  const fileOwnCoins = paths.coinsDumpFile(dataRoot, id);
  const fileFiltered = path.join(dataDir, '1-filtered-names.json');
  const fileTransfer = path.join(dataDir, '1-transfer.json');

  const fileMissing = path.join(dataDir, '2-missing.json');
  const fileMissingTransfer = path.join(dataDir, '2-missing-transfer.json');
  const fileFinal = path.join(dataDir, 'all-not-missing.json');

  await fs.mkdirp(dataDir);

  const step = config.str(1, 'all');

  let fallthrough = config.bool('all', false);

  switch (step) {
    case '0':
    case 'dump': {
      console.log('Getting wallet names...');

      await spawn(paths.execs.dump, ['names', id], {
        env: cfg.configToENV(config)
      });

      await spawn(paths.execs.dump, ['coins', id], {
        env: cfg.configToENV(config)
      });

      if (!fallthrough)
        break;
    }

    case 'all':
      fallthrough = true;

    case '1':
    case 'filter': {
      const names = await readJSON(fileOwnNames, true);
      const filtered = [];
      const transfer = [];

      for (const nameInfo of names) {
        if (nameInfo.state !== 'CLOSED')
          continue;

        if (nameInfo.stats.transferLockupStart)
          transfer.push(nameInfo);

        filtered.push(nameInfo);
      }

      await writeJSON(fileFiltered, filtered, true);
      await writeJSON(fileTransfer, transfer, true);

      if (!fallthrough)
        break;
    }

    case 'status': {
      const names = await readJSON(fileFiltered, true);
      const namesTransfer = await readJSON(fileTransfer, true);

      console.log(`
      All owned names: ${names.length}.
      Transfer requested for: ${namesTransfer.length}`);
      break;
    }

    case '2':
    case 'verify': {
      const coins = await readJSON(fileOwnCoins, true);
      const names = await readJSON(fileFiltered, true);
      const namesTransfer = await readJSON(fileTransfer, true);

      const coinsSet = new Set();
      for (const coin of coins)
        coinsSet.add(toKey(coin));

      const all = [];
      const missing = [];
      for (const name of names) {
        if (!coinsSet.has(toKey(name.owner))) {
          missing.push(name);
          continue;
        }

        all.push(name);
      }

      const missingTransfer = [];
      for (const name of namesTransfer) {
        if (!coinsSet.has(toKey(name.owner))) {
          missingTransfer.push(name);
          continue;
        }
        all.push(name);
      }

      const sort = (a, b) => a.stats.daysUntilExpire - b.stats.daysUntilExpire;

      missing.sort(sort);
      missingTransfer.sort(sort);

      console.log(`Missing: ${missing.length + missingTransfer.length} `
                + `of ${names.length}.`);
      console.log(`Missing Transfer: ${missingTransfer.length} `
                + `of ${namesTransfer.length}.`);
      await writeJSON(fileMissing, missing, false);
      await writeJSON(fileMissingTransfer, missingTransfer, false);
      await writeJSON(fileFinal, all, true);
    }
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});

function toKey(coin) {
  return coin.hash + '/' + coin.index;
}
