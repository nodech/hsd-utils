#!/usr/bin/env node

'use strict';

const path = require('path');
const os = require('os');
const fs = require('bfile');
const hsd = require('hsd');
const blockstore = require('hsd/lib/blockstore');
const {Rules, Chain, Network} = hsd;
const cfg = require('../../lib/config');
const util = require('../../lib/util');
const {readJSON, writeJSON} = util;

function help() {
  const help = `./bin/namestates/check-check-opens-unowned-low CHAIN_PATH STEP

  OPTIONS:
    --network     main   - network.
    --progress    10000  - progress report to STDERR.

  NOTE: Needs non-pruned chain.
  `;
  console.log(help);
  process.exit(2);
}

(async () => {
  const config = cfg.parse();

  const chainPath = config.str(0);

  if (!chainPath)
    help();

  const network = config.str('network', 'main');
  const dataRoot = config.str('data-dir', os.tmpdir());
  const dataDir = path.join(dataRoot, 'check-names');
  const fileAllNames = path.join(dataDir, 'all-names.json');
  const fileOpenables = path.join(dataDir, 'openables.json');
  const progress = config.uint('progress', 1e4);

  await fs.mkdirp(dataDir);

  const store = blockstore.create({
    network: network,
    prefix: chainPath
  });

  const chain = new Chain({
    network: network,
    prefix: chainPath,
    blocks: store,
    memory: false,
    indexTX: true,
    indexAddress: true
  });

  await store.open();
  await chain.open();

  const nameset = new Set();
  const names = [];

  const collectBlockOpens = (txs) => {
    for (const tx of txs) {
      const {outputs} = tx;

      for (const output of outputs) {
        if (output.covenant.type !== Rules.types.OPEN)
          continue;

        const name = output.covenant.get(2).toString('ascii');

        if (nameset.has(name))
          continue;

        const hash = output.covenant.getHash(0).toString('hex');
        nameset.add(name);
        names.push({ name, hash });
      }
    }
  };

  const step = config.str(1, 'all');
  let fallthrough = config.bool('all', false);

  switch (step) {
    case 'all':
      fallthrough = true;

    case '0':
    case 'allnames': {
      const tipHeight = chain.tip.height;

      console.log(`Dumping all names... blocks 0 to ${tipHeight}...`);
      for (let i = 0; i < tipHeight; i++) {
        const entry = await chain.getEntry(i);
        const block = await chain.getBlock(entry.hash);

        collectBlockOpens(block.txs);

        const prc = util.logPercent(i, tipHeight, progress);
        if (prc)
          console.log(`Processed ${i} blocks of ${tipHeight}. (${prc}%)`);
      }

      console.log(`Collected ${names.length}. Writing to disk...`);
      await writeJSON(fileAllNames, names, true);

      if (!fallthrough)
        break;
    }

    case '1':
    case 'filter': {
      const names = await readJSON(fileAllNames, true);
      const openables = [];

      console.log(`Filtering openable names... Total: ${names.length}`);

      for (let i = 0; i < names.length; i++) {
        const name = names[i].name;
        const hash = Buffer.from(names[i].hash, 'hex');

        const ns = await chain.db.getNameState(hash);

        const prc = util.logPercent(i, names.length, 10000);
        if (prc)
          console.log(`Filtering names ${i} of ${names.length}... (${prc}%)`);

        if (!ns) {
          openables.push(name);
          continue;
        }

        if (ns.isExpired(chain.tip.height, Network.get(network))) {
          openables.push(name);
          continue;
        }
      }

      console.log(`All openable ${openables.length}.`);
      await writeJSON(fileOpenables, openables);
    }
  }

  await store.close();
  await chain.close();
})().catch((e) => {
  console.error(e);
  process.exit(1);
});

